// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9WqxVqG68BmDdoC5M3n3qB
// Component: JdRW8IijYIt4-
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_copy_of_starter_blog_primary_copy.module.css"; // plasmic-import: 9WqxVqG68BmDdoC5M3n3qB/projectcss
import sty from "./PlasmicAuthorBio.module.css"; // plasmic-import: JdRW8IijYIt4-/css
import PlasmicLogoIcon from "./icons/PlasmicIcon__PlasmicLogo"; // plasmic-import: twVw3cd5jNWPH/icon

export const PlasmicAuthorBio__VariantProps = new Array();

export const PlasmicAuthorBio__ArgProps = new Array(
  "profilepic",
  "description"
);

function PlasmicAuthorBio__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <PlasmicLogoIcon
            className={classNames(projectcss.all, sty.svg___6R4Ry)}
            role={"img"}
          />
        ),

        value: args.profilepic
      })}

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Built with love by the Plasmic team. ",
          value: args.description
        })}
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAuthorBio__ArgProps,
      internalVariantPropNames: PlasmicAuthorBio__VariantProps
    });

    return PlasmicAuthorBio__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAuthorBio";
  } else {
    func.displayName = `PlasmicAuthorBio.${nodeName}`;
  }
  return func;
}

export const PlasmicAuthorBio = Object.assign(
  // Top-level PlasmicAuthorBio renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicAuthorBio
    internalVariantProps: PlasmicAuthorBio__VariantProps,
    internalArgProps: PlasmicAuthorBio__ArgProps
  }
);

export default PlasmicAuthorBio;
/* prettier-ignore-end */
