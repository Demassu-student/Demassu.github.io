// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9WqxVqG68BmDdoC5M3n3qB
// Component: mzuwSuLvTk0G3
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import HomeHeader from "../../HomeHeader"; // plasmic-import: tD8zdSRpzXthy/component
import ListItem from "../../ListItem"; // plasmic-import: YDCYq6Ih0h7RX/component
import Footer from "../../Footer"; // plasmic-import: 5-O8kuvmAsrbp/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_copy_of_starter_blog_primary_copy.module.css"; // plasmic-import: 9WqxVqG68BmDdoC5M3n3qB/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: mzuwSuLvTk0G3/css

export const PlasmicHome__VariantProps = new Array();

export const PlasmicHome__ArgProps = new Array();

function PlasmicHome__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <HomeHeader
              data-plasmic-name={"homeHeader"}
              data-plasmic-override={overrides.homeHeader}
              className={classNames("__wab_instance", sty.homeHeader)}
              title={"Plasmic Starter Blog"}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"container"}
              data-plasmic-override={overrides.container}
              hasGap={true}
              className={classNames(projectcss.all, sty.container)}
            >
              <ListItem
                date={"April 1, 2020"}
                description={"3 months later, I'm still blogging"}
                title={"Fourth post"}
              />

              <ListItem
                className={classNames("__wab_instance", sty.listItem__qtWsr)}
                date={"March 1, 2020"}
                description={"2 months later, I'm still blogging."}
                title={
                  <p.PlasmicLink
                    data-plasmic-name={"link"}
                    data-plasmic-override={overrides.link}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link
                    )}
                    component={Link}
                    href={"/billie"}
                    platform={"nextjs"}
                    target={"_blank"}
                  >
                    {"Third post"}
                  </p.PlasmicLink>
                }
              />

              <ListItem
                className={classNames("__wab_instance", sty.listItem___8Czjw)}
                date={"February 1, 2020"}
                description={"1 month later, I'm still blogging."}
                title={"Second post"}
              />

              <ListItem
                className={classNames("__wab_instance", sty.listItem__kiTuc)}
                date={"January 1, 2020"}
                description={"Hello world"}
                title={"Hello world"}
              />
            </p.Stack>

            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "homeHeader", "container", "link", "footer"],
  freeBox: ["freeBox", "homeHeader", "container", "link", "footer"],
  homeHeader: ["homeHeader"],
  container: ["container", "link"],
  link: ["link"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHome__ArgProps,
      internalVariantPropNames: PlasmicHome__VariantProps
    });

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    homeHeader: makeNodeComponent("homeHeader"),
    container: makeNodeComponent("container"),
    link: makeNodeComponent("link"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
